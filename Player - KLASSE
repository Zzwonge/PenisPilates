class Player
{ 
  int counter = 0;

  PImage aniImage; // bild der animation
  int aniMaxFrames; // anzahl der frames der animation
  int aniWidth;
  int aniHeight;

  String allKeys = "";
  String keyPattern;
  int patternIndex = 0;

  Player (String aniName, int aniMaxFrames, String keyPattern) {
    this.aniImage = loadImage(aniName);
    this.aniMaxFrames = aniMaxFrames;
    this.aniWidth = this.aniImage.width / this.aniMaxFrames;
    this.aniHeight = this.aniImage.height;

    this.keyPattern = keyPattern;
    this.analyseKeyPattern();
  }

  void inc() {
    this.counter++;
    println(this.counter);
  }

  void draw() {
    int x = this.counter % aniMaxFrames * this.aniWidth;
    //println("x: " + x);

    PImage sprite = this.aniImage.get(x, 0, this.aniWidth, this.aniHeight);
    image(sprite, 0, 0);
  }

  // erstellt eine liste von aktionstasten aus dem muster, in dem jede taste nur einmal vorkommt.
  // muster: "yyxxcccxxy" -> "yxc"
  void analyseKeyPattern() {
    for (int i = 0; i < this.keyPattern.length(); i++) {
      char c = this.keyPattern.charAt(i);

      // wenn die taste an position -1 (noch nicht vorhanden ist)
      if (this.allKeys.indexOf(c) == -1) {
        this.allKeys += c;
      }
    }
  }

  // gibt zurück ob die gegebene Taste zu den aktionstasten gehört
  boolean reactsToKey(char key) {
    return this.allKeys.indexOf(key) != -1;
  }

  boolean checkAndIncPatternIndex(char key) {
    if (this.keyPattern.charAt(this.patternIndex) == key) {
      //println(key + " ist der richtige an position " + this.patternIndex);
      if (this.keyPattern.length() > this.patternIndex + 1) {
        this.patternIndex++;
      }
      else {
        this.patternIndex = 0;
      }

      return true;
    }
    else {
      return false;
    }
  }
}
